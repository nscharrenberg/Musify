<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/header")
</head>
<body>
<div class="navbar navbar-default navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("Musify", "ClientGenres", "Genres", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>@Html.ActionLink("Home", "ClientGenres", "Genres")</li>
                <li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Admin <span class="caret"></span></a> 
                    <ul class="dropdown-menu">
                        <li>@Html.ActionLink("Genres", "Index", "Genres")</li>
                        <li>@Html.ActionLink("Artists", "Index", "Artists")</li>
                        <li>@Html.ActionLink("Albums", "AllAlbums", "Album")</li>
                    </ul>
                </li>
                    
            </ul>
            <form class="navbar-form navbar-right search" role="search" _lpchecked="1">
                <div class="form-group">
                    <input class="form-control" placeholder="Search..." type="text" id="searchBarId">
                </div>
                <div class="form-group">
                    <select class="form-control" id="myOption" name="category" onmousedown="this.value = '';" onchange="searchFunction(this.value);">
                        <option value="1">Artist</option>
                        <option value="2">Song</option>
                        <option value="3">Album</option>
                        <option value="4">User</option>
                        <option value="5">Genre</option>
                    </select>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="container body-content">
    @RenderBody()
    <hr />
    <footer>
        <p>&copy; @DateTime.Now.Year - Musify</p>
    </footer>
</div>

    
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/footer")
@RenderSection("scripts", required: false)
    
<script type="text/javascript">
    function searchFunction(value) {
        if (value == 1) {
            searchArtist();
        } else if (value == 2) {
            searchSong();
        } else if (value == 3) {
            searchAlbum();
        } else if (value == 4) {
            searchUser();
        } else if (value == 5) {
            searchGenre();
        } else {
            searchArtist();
        }
    }

    function searchArtist() {
        $(document).ready(function () {
            $('#results').hide();
        });
        $("#searchBarId").autocomplete({
            source: function(request, response) {
                var artist = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("Autocomplete", "Artists"))",
                    data: { "content": request.term },
                    success: function(data) {
                        for (var i = 0; i < data.length; i++) {
                            artist[i] = {
                                label: data[i].Value,
                                Id: data[i].Key
                            };
                        }
                    }
                });
                response(artist);
            },
            select: function(event, ui) {
                //fill selected customer details on form
                var url = '@Url.Action("ClientArtistDetails", "Artists", new { id = "param" })';
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetArtistById", "Artists"))",
                    data: { "id": ui.item.Id },

                    success: function (data) {
                        location.href = url.replace('param', data.Id);
                        action = data.Action;
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            },
            open: function () {
                $(this).data("uiAutocomplete").menu.element.addClass("results");
            },
            appendTo: ".search",
        });
    }

    function searchAlbum() {
        $(document).ready(function () {
            $('#results').hide();
        });
        $("#searchBarId").autocomplete({
            source: function(request, response) {
                var artist = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("Autocomplete", "Album"))",
                    data: { "content": request.term },
                    success: function(data) {
                        for (var i = 0; i < data.length; i++) {
                            artist[i] = {
                                label: data[i].Value,
                                Id: data[i].Key
                            };
                        }
                    }
                });
                response(artist);
            },
            select: function(event, ui) {
                //fill selected customer details on form
                var url = '@Url.Action("ClientAlbumOverview", "Album", new { id = "param" })';
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetAlbumById", "Album"))",
                    data: { "id": ui.item.Id },

                    success: function (data) {
                        location.href = url.replace('param', data);
                        action = data.Action;
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            },
            open: function () {
                $(this).data("uiAutocomplete").menu.element.addClass("results");
            },
            appendTo: ".search"
        });
    }

    function searchSong() {
        $(document).ready(function () {
            $('#results').hide();
        });
        $("#searchBarId").autocomplete({
            source: function(request, response) {
                var artist = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("Autocomplete", "Songs"))",
                    data: { "content": request.term },
                    success: function(data) {
                        for (var i = 0; i < data.length; i++) {
                            artist[i] = {
                                label: data[i].Value,
                                Id: data[i].Key
                            };
                        }
                    }
                });
                response(artist);
            },
            select: function(event, ui) {
                //fill selected customer details on form
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetSongById", "Songs"))",
                    data: { "id": ui.item.Id },

                    success: function (data) {
                        alert('There is no musicplayer yet!');
                        action = data.Action;
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            },
            open: function () {
                $(this).data("uiAutocomplete").menu.element.addClass("results");
            },
            appendTo: ".search"
        });
    }

    function searchGenre() {
        $(document).ready(function () {
            $('#results').hide();
        });
        $("#searchBarId").autocomplete({
            source: function(request, response) {
                var artist = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("Autocomplete", "Genres"))",
                    data: { "content": request.term },
                    success: function(data) {
                        for (var i = 0; i < data.length; i++) {
                            artist[i] = {
                                label: data[i].Value,
                                Id: data[i].Key
                            };
                        }
                    }
                });
                response(artist);
            },
            select: function(event, ui) {
                //fill selected customer details on form-
                var url = '@Url.Action("ClientArtists", "Artists", new { id = "param" })';
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetGenreById", "Genres"))",
                    data: { "id": ui.item.Id },

                    success: function (data) {
                        location.href = url.replace('param', data);
                        action = data.Action;
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
                });
            },
            open: function () {
                $(this).data("uiAutocomplete").menu.element.addClass("results");
            },
            appendTo: ".search"
        });
    }


</script>
</body>
</html>

